"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChoicesValidator = exports.TypeValidator = exports.IsInstanceValidator = exports.ValueRangeValidator = exports.LengthValidator = exports.Validator = exports.ValidationError = void 0;
class ValidationError extends Error {
    constructor(data, rawMessage) {
        super();
        this.data = data;
        this.rawMessage = rawMessage;
        this.path = [];
        this.name = this.constructor.name;
    }
    get message() {
        return `[${this.path.join(".")}]: ${this.rawMessage}\n${JSON.stringify(this.data, undefined, 4)}`;
    }
}
exports.ValidationError = ValidationError;
class Validator {
}
exports.Validator = Validator;
class LengthValidator extends Validator {
    constructor(limits = {}) {
        super();
        this.limits = limits;
    }
    validate(value) {
        if (this.limits.max && value.length > this.limits.max)
            throw new ValidationError(value, `Max length: "${this.limits.max}"`);
        if (this.limits.min && value.length < this.limits.min)
            throw new ValidationError(value, `Min length: "${this.limits.min}"`);
    }
}
exports.LengthValidator = LengthValidator;
class ValueRangeValidator extends Validator {
    constructor(limits) {
        super();
        this.limits = limits;
    }
    validate(value) {
        if (this.limits.max && value > this.limits.max)
            throw new ValidationError(value, `Max value: "${this.limits.max}"`);
        if (this.limits.min && value < this.limits.min)
            throw new ValidationError(value, `Min value: "${this.limits.min}"`);
    }
}
exports.ValueRangeValidator = ValueRangeValidator;
class IsInstanceValidator extends Validator {
    constructor(...targets) {
        super();
        this.targets = targets;
    }
    validate(value) {
        if (!this.targets.some((v) => value instanceof v))
            throw new ValidationError(value, `Should be an instance of "${this.targets.map((v) => v.name)}"`);
    }
}
exports.IsInstanceValidator = IsInstanceValidator;
class TypeValidator extends Validator {
    constructor(...types) {
        super();
        this.types = types;
    }
    validate(value) {
        if (!this.types.some((v) => typeof value == v))
            throw new ValidationError(value, `Type should be "${this.types}"`);
    }
}
exports.TypeValidator = TypeValidator;
class ChoicesValidator extends Validator {
    constructor(...choices) {
        super();
        this.choices = choices;
    }
    validate(value) {
        if (!this.choices.includes(value))
            throw new ValidationError(value, `Valid choices: "${this.choices}"`);
    }
}
exports.ChoicesValidator = ChoicesValidator;
//# sourceMappingURL=validators.js.map