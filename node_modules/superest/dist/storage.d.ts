export declare type PK<T> = Extract<T[keyof T], PropertyKey>;
export declare abstract class AbstractStorage<T, K extends PK<T> = PK<T>> {
    abstract insert(pk: K, value: T): T;
    abstract retrieve(pk: K): T;
    abstract update(pk: K, value: Partial<T>): T;
    abstract delete(pk: K): T;
    abstract exists(pk: K): boolean;
    abstract clear(): void;
}
export declare class Storage<T, K extends PK<T> = PK<T>> extends AbstractStorage<T, K> {
    readonly data: Record<K, T>;
    constructor(initial?: Record<K, T>);
    insert(pk: K, value: T): Record<K, T>[K];
    retrieve(pk: K): Record<K, T>[K];
    update(pk: K, value: Partial<T>): Record<K, T>[K];
    delete(pk: K): Record<K, T>[K];
    exists(pk: K): boolean;
    clear(): void;
}
//# sourceMappingURL=storage.d.ts.map