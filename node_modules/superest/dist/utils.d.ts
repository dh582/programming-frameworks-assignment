export declare type Values<T> = T[keyof T];
/**
 * https://stackoverflow.com/questions/50374908/transform-union-type-to-intersection-type
 */
export declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
/**
 * Extract from `T` those keys whose values are assignable to `U`.
 */
export declare type ExtractKeys<T, U> = Values<{
    [K in keyof T]: T[K] extends U ? K : never;
}>;
export declare function transformCase<R>(data: R, handler?: (v: string) => string): R;
export declare function mixinStatic<Base extends Function, Mixins extends Function[]>(base: Base, ...mixins: Mixins): Base & Pick<UnionToIntersection<Mixins[Extract<keyof Mixins, number>]>, Exclude<keyof UnionToIntersection<Mixins[Extract<keyof Mixins, number>]>, "toString" | "length" | "apply" | "call" | "bind" | "prototype" | "arguments" | "caller" | "name">>;
//# sourceMappingURL=utils.d.ts.map